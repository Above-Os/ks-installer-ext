---

- import_tasks: init-namespaces.yaml


- name: KubeSphere | Getting Kubernetes master num
  shell: >
    {{ bin_dir }}/kubectl get node | awk '{if(NR>1){print $3}}' | grep master | wc -l
  register: masters
  failed_when: false


- name: KubeSphere | Setting master num
  set_fact:
    enableHA: >-
      {% if masters is defined and masters.stdout is defined and masters.stdout != "0" and masters.stdout != "1" %}true{% else %}false{% endif %}
  when:
    - enableHA is not defined

- name: KubeSphere | Getting common component installation files
  copy:
    src: "{{ item }}"
    dest: "{{ kubesphere_dir }}/"
  loop:
    - "common"

- name: KubeSphere | Checking Kubernetes version
  shell: >
    {{ bin_dir }}/kubectl version -o json | jq -r '.serverVersion.gitVersion'
  register: kubernetes_version

- name: KubeSphere | Deploying snapshot controller
  block:
    - name: KubeSphere | Getting common component installation files
      copy:
        src: "{{ item }}"
        dest: "{{ kubesphere_dir }}/"
      loop:
        - "snapshot-controller"

    - name: KubeSphere | Creating snapshot controller values
      template:
        src: "{{ item.file }}.j2"
        dest: "{{ kubesphere_dir }}/{{ item.file }}"
      with_items:
        - { name: custom-values-snapshot-controller, file: custom-values-snapshot-controller.yaml }

    - name: KubeSphere | Updating snapshot crd
      command: >
        {% if kubernetes_version is version('v1.19.0', '>=') %}
        {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/snapshot-controller/crds/snapshot.storage.k8s.io_volumesnapshot.yaml --force
        {% else %}
        {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/snapshot-controller/crds/snapshot.storage.k8s.io_volumesnapshot_before119.yaml --force
        {% endif %}
      failed_when: false

    - name: KubeSphere | Deploying snapshot controller
      shell: >
        {{ bin_dir }}/helm upgrade --install snapshot-controller
        {{ kubesphere_dir }}/snapshot-controller
        -f {{ kubesphere_dir }}/custom-values-snapshot-controller.yaml
        --namespace kube-system
      failed_when: false

  when:
    - kubernetes_version is version('v1.17.0', '>=')

- name: KubeSphere | Creating common component manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/common/{{ item.file }}"
  with_items:
    - { path: redis, file: redis.yaml }

- import_tasks: redis-install.yaml

#- import_tasks: minio-install.yaml

#     - import_tasks: openldap-install.yaml

#   when:
#     - openpitrix_component_pod.stdout.find("openpitrix-db-deployment") != -1


# - import_tasks: common-install.yaml
#   when:
#     - openpitrix_component_pod.stdout.find("openpitrix-db-deployment") == -1


# - name: KubeSphere | Setting persistentVolumeReclaimPolicy (mysql/etcd/minio)
#   block:

#     - name: Setting persistentVolumeReclaimPolicy (mysql)
#       shell: >
#         kubectl patch pv $(kubectl get pv | grep "mysql-pvc" | awk '{print $1}')
#         -p '{"spec":{"persistentVolumeReclaimPolicy": "Delete"}}'

#     - name: Setting persistentVolumeReclaimPolicy (etcd)
#       shell: >
#         kubectl patch pv $(kubectl get pv | grep "etcd-pvc" | awk '{print $1}')
#         -p '{"spec":{"persistentVolumeReclaimPolicy": "Delete"}}'

#   when:
#     - openpitrix_component_pod.stdout.find("openpitrix-db-deployment") != -1
